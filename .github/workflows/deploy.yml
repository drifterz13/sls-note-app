name: Deploy lambda

on:
  push:
    branches: [main, dev]

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Get deploy stage
        id: get_deploy_stage
        run: |
          if [$REF == 'refs/heads/main']
          then
              echo "Going to deploy to prod"
              echo "::set-output name=DEPLOY_STAGE::prod"
          else
              echo "Going to deploy to dev"
              echo "::set-output name=DEPLOY_STAGE::dev"
          fi
        env:
          REF: ${{ github.ref }}

      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: serverless deploy
        uses: serverless/github-action@master
        with:
          args: deploy --stage ${{ steps.get_deploy_stage.outputs.DEPLOY_STAGE }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
